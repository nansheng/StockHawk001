package com.sam_chordas.android.stockhawk.ui;

import android.database.Cursor;
import android.graphics.Color;

import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.sam_chordas.android.stockhawk.R;
import com.sam_chordas.android.stockhawk.data.QuoteColumns;
import com.sam_chordas.android.stockhawk.data.QuoteHistoryColumns;
import com.sam_chordas.android.stockhawk.data.QuoteProvider;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

public class StockDetailActivityFragment extends Fragment
        implements LoaderManager.LoaderCallbacks<Cursor> {

    public static final String ARG_SYMBOL = "ARG_SYMBOL";
    public static final String ORDER = " ASC";
    private static final int CURSOR_LOADER_ID = 1;
    private String mSymbol;
    private LineChartView mChart;

    public StockDetailActivityFragment(){}

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments().containsKey(ARG_SYMBOL)) {
            mSymbol = getArguments().getString(ARG_SYMBOL);
        }
        getLoaderManager().initLoader(CURSOR_LOADER_ID, null, this);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_stock_detail, container, false);
        mChart = (LineChartView) rootView.findViewById(R.id.line_chart);
        return rootView;
    }

    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        String sortOrder = QuoteColumns._ID + ORDER;

        return new CursorLoader(getContext(), QuoteProvider.QuotesHistory.CONTENT_URI,
                new String[]{QuoteHistoryColumns._ID,
                        QuoteHistoryColumns.SYMBOL,
                        QuoteHistoryColumns.BIDPRICE,
                        QuoteHistoryColumns.DATE
                }, QuoteHistoryColumns.SYMBOL + " = \"" + mSymbol + "\"",
                null, sortOrder);
    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        if (data != null && data.moveToFirst()) {
            updateChart(data);
        }
    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {}

    private void updateChart(Cursor data) {

        List<AxisValue> axisValuesX = new ArrayList<>();
        List<PointValue> pointValues = new ArrayList<>();

        int counter = 0;
        do {
            String date = data.getString(data.getColumnIndex(QuoteHistoryColumns.DATE));
            String bidPrice = data.getString(data.getColumnIndex(QuoteHistoryColumns.BIDPRICE));

            int x = data.getCount() - 1 - counter;

            PointValue pointValue = new PointValue(x, Float.valueOf(bidPrice));
            pointValue.setLabel(date);
            pointValues.add(pointValue);

            if (counter == 1 || counter == data.getCount() - 1 || counter == data.getCount() / 2 ) {
                AxisValue axisValueX = new AxisValue(x);
                axisValueX.setLabel(date);
                axisValuesX.add(axisValueX);
            }

            counter++;

        } while (data.moveToNext());

        Line line = new Line(pointValues).setColor(Color.YELLOW).setCubic(false);
        List<Line> lines = new ArrayList<>();
        lines.add(line);
        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(lines);

        Axis axisX = new Axis(axisValuesX);
        axisX.setHasLines(true);
        axisX.setMaxLabelChars(4);
        lineChartData.setAxisXBottom(axisX);

        Axis axisY = new Axis();
        axisY.setAutoGenerated(true);
        axisY.setMaxLabelChars(4);
        axisY.setHasLines(true);
        lineChartData.setAxisYLeft(axisY);

        mChart.setInteractive(false);
        mChart.setLineChartData(lineChartData);
        mChart.setVisibility(View.VISIBLE);
    }
}